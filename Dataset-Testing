{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNromF4fjHdedfgBKrY7poZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Maheshanks/crudphp-postgresql/blob/main/Dataset-Testing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "t5rtA8t_QwI9"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense\n",
        "from hmmlearn import hmm\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "import random"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\"\n",
        "]\n",
        "\n",
        "# Mengonversi ke numerik\n",
        "label_encoder = LabelEncoder()\n",
        "encoded_data = label_encoder.fit_transform(hk_lotto_data)"
      ],
      "metadata": {
        "id": "RfXLgluoTMNX"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Konversi data ke format HMM\n",
        "hmm_data = np.array(encoded_data).reshape(-1, 1)\n",
        "\n",
        "# Model HMM\n",
        "hmm_model = hmm.MultinomialHMM(n_components=5, n_iter=100)\n",
        "hmm_model.fit(hmm_data)\n",
        "\n",
        "# Prediksi dengan HMM\n",
        "hmm_pred_index = hmm_model.predict(hmm_data[-3:].reshape(-1, 1))\n",
        "predicted_hmm = label_encoder.inverse_transform([random.choice(hmm_pred_index)])[0]\n",
        "\n",
        "print(\"🔹 Prediksi angka selanjutnya (HMM):\", predicted_hmm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UNsmHMFMTQxH",
        "outputId": "65901ac4-088c-4c03-bd69-7d325b324b50"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:hmmlearn.hmm:MultinomialHMM has undergone major changes. The previous version was implementing a CategoricalHMM (a special case of MultinomialHMM). This new implementation follows the standard definition for a Multinomial distribution (e.g. as in https://en.wikipedia.org/wiki/Multinomial_distribution). See these issues for details:\n",
            "https://github.com/hmmlearn/hmmlearn/issues/335\n",
            "https://github.com/hmmlearn/hmmlearn/issues/340\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Prediksi angka selanjutnya (HMM): 0278\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Membentuk dataset untuk training LSTM\n",
        "X_train = np.array([encoded_data[i:i+3] for i in range(len(encoded_data)-3)])\n",
        "y_train = np.array([encoded_data[i+3] for i in range(len(encoded_data)-3)])\n",
        "\n",
        "# Model LSTM\n",
        "model = Sequential([\n",
        "    tf.keras.layers.Embedding(input_dim=len(hk_lotto_data), output_dim=8, input_length=3),\n",
        "    LSTM(50, return_sequences=False),\n",
        "    Dense(20, activation=\"relu\"),\n",
        "    Dense(len(hk_lotto_data), activation=\"softmax\")\n",
        "])\n",
        "\n",
        "model.compile(optimizer=Adam(learning_rate=0.001), loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Training model\n",
        "model.fit(X_train, y_train, epochs=100, verbose=1)\n",
        "\n",
        "# Prediksi angka selanjutnya dengan LSTM\n",
        "last_sequence = np.array([encoded_data[-3:]])\n",
        "predicted_index = np.argmax(model.predict(last_sequence))\n",
        "predicted_lstm = label_encoder.inverse_transform([predicted_index])[0]\n",
        "\n",
        "print(\"🔹 Prediksi angka selanjutnya (LSTM):\", predicted_lstm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-NZ3ZU-6TtSn",
        "outputId": "35419d82-5d6d-483a-b7d9-29f9e09a673c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - accuracy: 0.0000e+00 - loss: 4.9637\n",
            "Epoch 2/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.0000e+00 - loss: 4.9626\n",
            "Epoch 3/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.0213 - loss: 4.9621\n",
            "Epoch 4/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 0.0091 - loss: 4.9617    \n",
            "Epoch 5/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.0117 - loss: 4.9611    \n",
            "Epoch 6/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.0117 - loss: 4.9603    \n",
            "Epoch 7/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0117 - loss: 4.9595     \n",
            "Epoch 8/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0265 - loss: 4.9583 \n",
            "Epoch 9/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0078 - loss: 4.9571     \n",
            "Epoch 10/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0108 - loss: 4.9551     \n",
            "Epoch 11/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.0187 - loss: 4.9531 \n",
            "Epoch 12/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0169 - loss: 4.9502 \n",
            "Epoch 13/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.0104 - loss: 4.9473     \n",
            "Epoch 14/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.0160 - loss: 4.9428    \n",
            "Epoch 15/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0074 - loss: 4.9364     \n",
            "Epoch 16/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0213 - loss: 4.9289 \n",
            "Epoch 17/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0108 - loss: 4.9158     \n",
            "Epoch 18/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.0213 - loss: 4.9055\n",
            "Epoch 19/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0206 - loss: 4.8906 \n",
            "Epoch 20/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0241 - loss: 4.8600 \n",
            "Epoch 21/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0097 - loss: 4.8284     \n",
            "Epoch 22/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.0115 - loss: 4.7920    \n",
            "Epoch 23/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.0249 - loss: 4.7446\n",
            "Epoch 24/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.0158 - loss: 4.6786    \n",
            "Epoch 25/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.0193 - loss: 4.5818\n",
            "Epoch 26/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.0171 - loss: 4.5018     \n",
            "Epoch 27/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.0128 - loss: 4.4098     \n",
            "Epoch 28/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0182 - loss: 4.3196     \n",
            "Epoch 29/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0191 - loss: 4.2409     \n",
            "Epoch 30/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0395 - loss: 4.1546  \n",
            "Epoch 31/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.0327 - loss: 4.0293\n",
            "Epoch 32/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.0447 - loss: 3.9019\n",
            "Epoch 33/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.0470 - loss: 3.8769     \n",
            "Epoch 34/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.0839 - loss: 3.6676\n",
            "Epoch 35/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.1236 - loss: 3.6063 \n",
            "Epoch 36/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.1127 - loss: 3.5159 \n",
            "Epoch 37/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.1542 - loss: 3.3629  \n",
            "Epoch 38/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.1385 - loss: 3.2851 \n",
            "Epoch 39/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.2038 - loss: 3.1664 \n",
            "Epoch 40/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.2058 - loss: 3.0786 \n",
            "Epoch 41/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.2381 - loss: 2.9394 \n",
            "Epoch 42/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.2481 - loss: 2.8017 \n",
            "Epoch 43/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.3012 - loss: 2.7418 \n",
            "Epoch 44/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.3432 - loss: 2.6382 \n",
            "Epoch 45/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.3916 - loss: 2.5147\n",
            "Epoch 46/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.4319 - loss: 2.4207\n",
            "Epoch 47/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.5332 - loss: 2.3373\n",
            "Epoch 48/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.4568 - loss: 2.3046 \n",
            "Epoch 49/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.4926 - loss: 2.1939  \n",
            "Epoch 50/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.5163 - loss: 2.1352  \n",
            "Epoch 51/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.5546 - loss: 2.0916 \n",
            "Epoch 52/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.5783 - loss: 2.0418 \n",
            "Epoch 53/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.6108 - loss: 1.9665 \n",
            "Epoch 54/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.6861 - loss: 1.8685\n",
            "Epoch 55/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.6939 - loss: 1.8118\n",
            "Epoch 56/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7006 - loss: 1.7868\n",
            "Epoch 57/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7134 - loss: 1.7103 \n",
            "Epoch 58/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7162 - loss: 1.7016  \n",
            "Epoch 59/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7496 - loss: 1.6258 \n",
            "Epoch 60/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7789 - loss: 1.5528  \n",
            "Epoch 61/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7688 - loss: 1.5581  \n",
            "Epoch 62/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8038 - loss: 1.5087 \n",
            "Epoch 63/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8628 - loss: 1.4608 \n",
            "Epoch 64/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8406 - loss: 1.4210 \n",
            "Epoch 65/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8597 - loss: 1.3884  \n",
            "Epoch 66/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8871 - loss: 1.3428 \n",
            "Epoch 67/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8604 - loss: 1.3397 \n",
            "Epoch 68/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8538 - loss: 1.3134 \n",
            "Epoch 69/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8987 - loss: 1.2404 \n",
            "Epoch 70/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9200 - loss: 1.2089 \n",
            "Epoch 71/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9094 - loss: 1.1591  \n",
            "Epoch 72/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9374 - loss: 1.1324\n",
            "Epoch 73/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9070 - loss: 1.1296\n",
            "Epoch 74/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9337 - loss: 1.0858 \n",
            "Epoch 75/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9384 - loss: 1.0579\n",
            "Epoch 76/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9339 - loss: 1.0685\n",
            "Epoch 77/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9412 - loss: 0.9906 \n",
            "Epoch 78/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9410 - loss: 0.9725 \n",
            "Epoch 79/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9291 - loss: 0.9634 \n",
            "Epoch 80/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9480 - loss: 0.9543 \n",
            "Epoch 81/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9412 - loss: 0.9493 \n",
            "Epoch 82/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9649 - loss: 0.8935 \n",
            "Epoch 83/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9684 - loss: 0.8711 \n",
            "Epoch 84/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9501 - loss: 0.8499 \n",
            "Epoch 85/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9703 - loss: 0.8202 \n",
            "Epoch 86/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9707 - loss: 0.8189 \n",
            "Epoch 87/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.9566 - loss: 0.7909\n",
            "Epoch 88/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9696 - loss: 0.7955 \n",
            "Epoch 89/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9946 - loss: 0.7405 \n",
            "Epoch 90/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9794 - loss: 0.7425 \n",
            "Epoch 91/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9740 - loss: 0.7200 \n",
            "Epoch 92/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.6726  \n",
            "Epoch 93/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9939 - loss: 0.6830 \n",
            "Epoch 94/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.9926 - loss: 0.6863 \n",
            "Epoch 95/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9831 - loss: 0.6469\n",
            "Epoch 96/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 1.0000 - loss: 0.6559\n",
            "Epoch 97/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 1.0000 - loss: 0.6475\n",
            "Epoch 98/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.6006\n",
            "Epoch 99/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.6081 \n",
            "Epoch 100/100\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.6154 \n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 202ms/step\n",
            "🔹 Prediksi angka selanjutnya (LSTM): 0170\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from hmmlearn import hmm\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Dataset angka lotre dalam bentuk vertikal\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\", \"0328\"\n",
        "]\n",
        "\n",
        "# Mengonversi dataset ke dalam bentuk numerik\n",
        "label_encoder = LabelEncoder()\n",
        "encoded_data = label_encoder.fit_transform(hk_lotto_data).reshape(-1, 1)\n",
        "\n",
        "# Inisialisasi model HMM\n",
        "model_hmm = hmm.MultinomialHMM(n_components=5, n_iter=100, random_state=42)\n",
        "\n",
        "# Melatih model dengan data\n",
        "model_hmm.fit(encoded_data)\n",
        "\n",
        "# Generate 5 angka berikutnya\n",
        "predicted_indices = model_hmm.predict(encoded_data[-5:].reshape(-1, 1))\n",
        "predicted_numbers = label_encoder.inverse_transform(predicted_indices)\n",
        "\n",
        "print(\"Prediksi 5 angka selanjutnya (HMM):\", predicted_numbers)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "heIvXZeYTYkn",
        "outputId": "a5b0a620-f0b6-4e55-fadd-3f252b405674"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:hmmlearn.hmm:MultinomialHMM has undergone major changes. The previous version was implementing a CategoricalHMM (a special case of MultinomialHMM). This new implementation follows the standard definition for a Multinomial distribution (e.g. as in https://en.wikipedia.org/wiki/Multinomial_distribution). See these issues for details:\n",
            "https://github.com/hmmlearn/hmmlearn/issues/335\n",
            "https://github.com/hmmlearn/hmmlearn/issues/340\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prediksi 5 angka selanjutnya (HMM): ['0138' '0078' '0138' '0078' '0138']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from hmmlearn import hmm\n",
        "from collections import Counter\n",
        "\n",
        "# Dataset angka lotre dalam bentuk numerik\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\", \"0328\"\n",
        "]\n",
        "\n",
        "# Mengonversi dataset ke dalam format numerik\n",
        "sequences = np.array([[int(digit) for digit in number] for number in hk_lotto_data])\n",
        "\n",
        "# Melatih model HMM\n",
        "hmm_model = hmm.MultinomialHMM(n_components=10, n_iter=100, random_state=42)\n",
        "hmm_model.fit(sequences)\n",
        "\n",
        "# Menghitung probabilitas tiap digit di setiap posisi (0-9 untuk masing-masing posisi)\n",
        "def digit_probabilities(sequences):\n",
        "    count_by_position = [Counter() for _ in range(4)]\n",
        "    total_counts = [0] * 4\n",
        "\n",
        "    for seq in sequences:\n",
        "        for pos, digit in enumerate(seq):\n",
        "            count_by_position[pos][digit] += 1\n",
        "            total_counts[pos] += 1\n",
        "\n",
        "    probabilities = [{k: v / total_counts[pos] for k, v in count.items()} for pos, count in enumerate(count_by_position)]\n",
        "    return probabilities\n",
        "\n",
        "probabilities = digit_probabilities(sequences)\n",
        "\n",
        "# Generate 5 angka berdasarkan probabilitas tertinggi\n",
        "predicted_numbers = []\n",
        "for _ in range(5):\n",
        "    generated_number = \"\".join(str(max(prob, key=prob.get)) for prob in probabilities)\n",
        "    predicted_numbers.append(generated_number)\n",
        "\n",
        "print(\"Prediksi 5 angka selanjutnya (HMM Probabilitas):\", predicted_numbers)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6HnC6CssVMFL",
        "outputId": "a2176ef0-553f-471f-cc3b-30476933b83b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:hmmlearn.hmm:MultinomialHMM has undergone major changes. The previous version was implementing a CategoricalHMM (a special case of MultinomialHMM). This new implementation follows the standard definition for a Multinomial distribution (e.g. as in https://en.wikipedia.org/wiki/Multinomial_distribution). See these issues for details:\n",
            "https://github.com/hmmlearn/hmmlearn/issues/335\n",
            "https://github.com/hmmlearn/hmmlearn/issues/340\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prediksi 5 angka selanjutnya (HMM Probabilitas): ['3406', '3406', '3406', '3406', '3406']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import itertools\n",
        "from hmmlearn import hmm\n",
        "from collections import Counter\n",
        "\n",
        "# Dataset angka lotre dalam bentuk string\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\", \"0328\"\n",
        "]\n",
        "\n",
        "# Mengonversi data ke dalam digit individu\n",
        "digit_sequences = [[int(digit) for digit in number] for number in hk_lotto_data]\n",
        "all_digits = list(itertools.chain(*digit_sequences))\n",
        "\n",
        "# Hitung probabilitas kemunculan setiap digit\n",
        "digit_counts = Counter(all_digits)\n",
        "total_digits = sum(digit_counts.values())\n",
        "digit_probabilities = {digit: count / total_digits for digit, count in digit_counts.items()}\n",
        "\n",
        "print(\"Probabilitas masing-masing digit:\")\n",
        "for digit, prob in sorted(digit_probabilities.items()):\n",
        "    print(f\"{digit} -> {prob:.4f}\")\n",
        "\n",
        "# Melatih HMM untuk memprediksi digit selanjutnya\n",
        "X = np.array(all_digits).reshape(-1, 1)\n",
        "model = hmm.MultinomialHMM(n_components=5, n_iter=100)\n",
        "model.fit(X)\n",
        "\n",
        "# Prediksi 5 angka selanjutnya\n",
        "predicted_digits = model.sample(5)[0].flatten()\n",
        "\n",
        "print(\"\\nPrediksi 5 angka selanjutnya (HMM Probabilitas):\", predicted_digits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "iCEUIm4IV1M3",
        "outputId": "fbdaf54d-4cad-4547-e791-e9db5882922f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:hmmlearn.hmm:MultinomialHMM has undergone major changes. The previous version was implementing a CategoricalHMM (a special case of MultinomialHMM). This new implementation follows the standard definition for a Multinomial distribution (e.g. as in https://en.wikipedia.org/wiki/Multinomial_distribution). See these issues for details:\n",
            "https://github.com/hmmlearn/hmmlearn/issues/335\n",
            "https://github.com/hmmlearn/hmmlearn/issues/340\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probabilitas masing-masing digit:\n",
            "0 -> 0.1337\n",
            "1 -> 0.0868\n",
            "2 -> 0.0851\n",
            "3 -> 0.1233\n",
            "4 -> 0.0938\n",
            "5 -> 0.0781\n",
            "6 -> 0.0938\n",
            "7 -> 0.0781\n",
            "8 -> 0.1181\n",
            "9 -> 0.1094\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "For sampling, a single n_trials must be given",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/hmmlearn/_emissions.py\u001b[0m in \u001b[0;36m_generate_sample_from_state\u001b[0;34m(self, state, random_state)\u001b[0m\n\u001b[1;32m    364\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 365\u001b[0;31m             \u001b[0mn_trials\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_trials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    366\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 1)",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-4ec0c5f49b5c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;31m# Prediksi 5 angka selanjutnya\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m \u001b[0mpredicted_digits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nPrediksi 5 angka selanjutnya (HMM Probabilitas):\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted_digits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/hmmlearn/base.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, n_samples, random_state, currstate)\u001b[0m\n\u001b[1;32m    439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m         \u001b[0mstate_sequence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcurrstate\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 441\u001b[0;31m         X = [self._generate_sample_from_state(\n\u001b[0m\u001b[1;32m    442\u001b[0m             currstate, random_state=random_state)]\n\u001b[1;32m    443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/hmmlearn/_emissions.py\u001b[0m in \u001b[0;36m_generate_sample_from_state\u001b[0;34m(self, state, random_state)\u001b[0m\n\u001b[1;32m    365\u001b[0m             \u001b[0mn_trials\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_trials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 367\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"For sampling, a single n_trials must be given\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m         return multinomial.rvs(n=n_trials, p=self.emissionprob_[state, :],\n\u001b[1;32m    369\u001b[0m                                random_state=random_state)\n",
            "\u001b[0;31mValueError\u001b[0m: For sampling, a single n_trials must be given"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import itertools\n",
        "from hmmlearn import hmm\n",
        "from collections import Counter\n",
        "\n",
        "# Dataset angka lotre dalam bentuk string\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\", \"0328\"\n",
        "]\n",
        "\n",
        "# Mengonversi data ke dalam digit individu\n",
        "digit_sequences = [[int(digit) for digit in number] for number in hk_lotto_data]\n",
        "all_digits = list(itertools.chain(*digit_sequences))\n",
        "\n",
        "# Hitung probabilitas kemunculan setiap digit\n",
        "digit_counts = Counter(all_digits)\n",
        "total_digits = sum(digit_counts.values())\n",
        "digit_probabilities = {digit: count / total_digits for digit, count in digit_counts.items()}\n",
        "\n",
        "print(\"Probabilitas masing-masing digit:\")\n",
        "for digit, prob in sorted(digit_probabilities.items()):\n",
        "    print(f\"{digit} -> {prob:.4f}\")\n",
        "\n",
        "# Melatih HMM untuk memprediksi digit selanjutnya\n",
        "X = np.array(all_digits).reshape(-1, 1)\n",
        "model = hmm.MultinomialHMM(n_components=5, n_iter=100)\n",
        "model.fit(X)\n",
        "\n",
        "# Prediksi 5 angka selanjutnya\n",
        "predicted_digits = model.sample(5)[0].flatten()\n",
        "\n",
        "print(\"\\nPrediksi 5 angka selanjutnya (HMM Probabilitas):\", predicted_digits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "6S9C-drYWMTg",
        "outputId": "3c922944-fa8a-4cd6-8e96-9661a7556096"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:hmmlearn.hmm:MultinomialHMM has undergone major changes. The previous version was implementing a CategoricalHMM (a special case of MultinomialHMM). This new implementation follows the standard definition for a Multinomial distribution (e.g. as in https://en.wikipedia.org/wiki/Multinomial_distribution). See these issues for details:\n",
            "https://github.com/hmmlearn/hmmlearn/issues/335\n",
            "https://github.com/hmmlearn/hmmlearn/issues/340\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probabilitas masing-masing digit:\n",
            "0 -> 0.1337\n",
            "1 -> 0.0868\n",
            "2 -> 0.0851\n",
            "3 -> 0.1233\n",
            "4 -> 0.0938\n",
            "5 -> 0.0781\n",
            "6 -> 0.0938\n",
            "7 -> 0.0781\n",
            "8 -> 0.1181\n",
            "9 -> 0.1094\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "For sampling, a single n_trials must be given",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/hmmlearn/_emissions.py\u001b[0m in \u001b[0;36m_generate_sample_from_state\u001b[0;34m(self, state, random_state)\u001b[0m\n\u001b[1;32m    364\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 365\u001b[0;31m             \u001b[0mn_trials\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_trials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    366\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 1)",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-4ec0c5f49b5c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;31m# Prediksi 5 angka selanjutnya\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m \u001b[0mpredicted_digits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nPrediksi 5 angka selanjutnya (HMM Probabilitas):\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted_digits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/hmmlearn/base.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, n_samples, random_state, currstate)\u001b[0m\n\u001b[1;32m    439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m         \u001b[0mstate_sequence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcurrstate\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 441\u001b[0;31m         X = [self._generate_sample_from_state(\n\u001b[0m\u001b[1;32m    442\u001b[0m             currstate, random_state=random_state)]\n\u001b[1;32m    443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/hmmlearn/_emissions.py\u001b[0m in \u001b[0;36m_generate_sample_from_state\u001b[0;34m(self, state, random_state)\u001b[0m\n\u001b[1;32m    365\u001b[0m             \u001b[0mn_trials\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_trials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 367\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"For sampling, a single n_trials must be given\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m         return multinomial.rvs(n=n_trials, p=self.emissionprob_[state, :],\n\u001b[1;32m    369\u001b[0m                                random_state=random_state)\n",
            "\u001b[0;31mValueError\u001b[0m: For sampling, a single n_trials must be given"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install hmmlearn==0.2.8"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BGtvv2w7WPFd",
        "outputId": "339c98d5-c776-4f98-91e9-fd65bb39aefa"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting hmmlearn==0.2.8\n",
            "  Downloading hmmlearn-0.2.8.tar.gz (61 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/61.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.9/61.9 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy>=1.10 in /usr/local/lib/python3.11/dist-packages (from hmmlearn==0.2.8) (1.26.4)\n",
            "Requirement already satisfied: scikit-learn>=0.16 in /usr/local/lib/python3.11/dist-packages (from hmmlearn==0.2.8) (1.6.1)\n",
            "Requirement already satisfied: scipy>=0.19 in /usr/local/lib/python3.11/dist-packages (from hmmlearn==0.2.8) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.16->hmmlearn==0.2.8) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.16->hmmlearn==0.2.8) (3.5.0)\n",
            "Building wheels for collected packages: hmmlearn\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mpython setup.py bdist_wheel\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Building wheel for hmmlearn (setup.py) ... \u001b[?25lerror\n",
            "\u001b[31m  ERROR: Failed building wheel for hmmlearn\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[?25h  Running setup.py clean for hmmlearn\n",
            "Failed to build hmmlearn\n",
            "\u001b[31mERROR: ERROR: Failed to build installable wheels for some pyproject.toml based projects (hmmlearn)\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install hmmlearn numpy pandas scikit-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FYfsXV3DWeC0",
        "outputId": "208c7703-6567-4108-c7d9-114b53f74ffb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: hmmlearn in /usr/local/lib/python3.11/dist-packages (0.3.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: scipy>=0.19 in /usr/local/lib/python3.11/dist-packages (from hmmlearn) (1.13.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from hmmlearn.hmm import GaussianHMM\n",
        "from collections import Counter\n",
        "\n",
        "# Data angka lotre\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\"\n",
        "]\n",
        "\n",
        "# Konversi ke array numerik\n",
        "numeric_data = np.array([list(map(int, num)) for num in hk_lotto_data])\n",
        "\n",
        "# Model HMM\n",
        "hmm_model = GaussianHMM(n_components=5, n_iter=100, covariance_type=\"diag\", random_state=42)\n",
        "hmm_model.fit(numeric_data)\n",
        "\n",
        "# Prediksi angka selanjutnya\n",
        "predictions = hmm_model.sample(5)[0]\n",
        "\n",
        "# Konversi hasil prediksi ke format angka lotre\n",
        "predicted_numbers = [\"\".join(map(str, map(int, pred))) for pred in predictions]\n",
        "\n",
        "# Probabilitas per angka\n",
        "all_digits = [digit for num in hk_lotto_data for digit in num]\n",
        "digit_counts = Counter(all_digits)\n",
        "total_dig\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "MwHz2OznWjuj",
        "outputId": "7251b03e-bf1d-4ff8-e653-1310fd6fbe61"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'total_dig' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-2af7f0f4ebcd>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0mall_digits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdigit\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhk_lotto_data\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdigit\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnum\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0mdigit_counts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_digits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m \u001b[0mtotal_dig\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'total_dig' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from hmmlearn.hmm import GaussianHMM\n",
        "from collections import Counter\n",
        "\n",
        "# Data angka lotre\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\"\n",
        "]\n",
        "\n",
        "# Konversi ke array numerik\n",
        "numeric_data = np.array([list(map(int, num)) for num in hk_lotto_data])\n",
        "\n",
        "# Model HMM\n",
        "hmm_model = GaussianHMM(n_components=5, n_iter=100, covariance_type=\"diag\", random_state=42)\n",
        "hmm_model.fit(numeric_data)\n",
        "\n",
        "# Prediksi angka selanjutnya\n",
        "predictions = hmm_model.sample(5)[0]\n",
        "\n",
        "# Konversi hasil prediksi ke format angka lotre\n",
        "predicted_numbers = [\"\".join(map(str, map(int, pred))) for pred in predictions]\n",
        "\n",
        "# Probabilitas per angka\n",
        "all_digits = [digit for num in hk_lotto_data for digit in num]\n",
        "digit_counts = Counter(all_digits)\n",
        "total_dig\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "q_lvou7LWqCt",
        "outputId": "faf3953b-76ed-40ec-e82d-8e8b9260c951"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'total_dig' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-2af7f0f4ebcd>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0mall_digits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdigit\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhk_lotto_data\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdigit\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnum\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0mdigit_counts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_digits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m \u001b[0mtotal_dig\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'total_dig' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install numpy tensorflow scikit-learn hmmlearn pandas statsmodels"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kdxQ51RqQ-3D",
        "outputId": "4b179057-dc77-48b1-ea59-535dacd5f911"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Collecting hmmlearn\n",
            "  Downloading hmmlearn-0.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.11/dist-packages (0.14.4)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.24)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.70.0)\n",
            "Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (1.0.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.14.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.1.31)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n",
            "Downloading hmmlearn-0.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (165 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m165.9/165.9 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: hmmlearn\n",
            "Successfully installed hmmlearn-0.3.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from hmmlearn.hmm import GaussianHMM\n",
        "from collections import Counter\n",
        "\n",
        "# Data angka lotre (diperbarui)\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\"\n",
        "]\n",
        "\n",
        "# Konversi ke array numerik\n",
        "numeric_data = np.array([list(map(int, num)) for num in hk_lotto_data])\n",
        "\n",
        "# Model HMM\n",
        "hmm_model = GaussianHMM(n_components=5, n_iter=100, covariance_type=\"diag\", random_state=42)\n",
        "hmm_model.fit(numeric_data)\n",
        "\n",
        "# Prediksi angka selanjutnya\n",
        "predictions = hmm_model.sample(5)[0]\n",
        "\n",
        "# Konversi hasil prediksi ke format angka lotre\n",
        "predicted_numbers = [\"\".join(map(str, map(int, pred))) for pred in predictions]\n",
        "\n",
        "# Probabilitas per angka\n",
        "all_digits = [digit for num in hk_lotto_data for digit in num]\n",
        "digit_counts = Counter(all_digits)\n",
        "total_digits = sum(digit_counts.values())\n",
        "\n",
        "digit_probabilities = {digit: count / total_digits for digit, count in digit_counts.items()}\n",
        "\n",
        "# Output hasil\n",
        "print(\"Prediksi 5 angka selanjutnya (HMM):\", predicted_numbers)\n",
        "print(\"\\nProbabilitas masing-masing digit:\")\n",
        "for digit, prob in sorted(digit_probabilities.items()):\n",
        "    print(f\"{digit} -> {prob:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Li2VU1eDXiox",
        "outputId": "6517796b-8c44-434d-faa6-e7d1f23117ca"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prediksi 5 angka selanjutnya (HMM): ['8044', '2755', '1-248', '6220', '31126']\n",
            "\n",
            "Probabilitas masing-masing digit:\n",
            "0 -> 0.1329\n",
            "1 -> 0.0874\n",
            "2 -> 0.0839\n",
            "3 -> 0.1224\n",
            "4 -> 0.0944\n",
            "5 -> 0.0787\n",
            "6 -> 0.0944\n",
            "7 -> 0.0787\n",
            "8 -> 0.1171\n",
            "9 -> 0.1101\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from hmmlearn.hmm import GaussianHMM\n",
        "from collections import Counter\n",
        "\n",
        "# Data angka lotre (diperbarui)\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\"\n",
        "]\n",
        "\n",
        "# Konversi ke array numerik\n",
        "numeric_data = np.array([list(map(int, num)) for num in hk_lotto_data])\n",
        "\n",
        "# Model HMM\n",
        "hmm_model = GaussianHMM(n_components=5, n_iter=100, covariance_type=\"diag\", random_state=42)\n",
        "hmm_model.fit(numeric_data)\n",
        "\n",
        "# Generate 50 angka prediksi\n",
        "num_predictions = 50\n",
        "predictions = hmm_model.sample(num_predictions)[0]\n",
        "\n",
        "# Konversi hasil prediksi ke format angka lotre\n",
        "predicted_numbers = [\"\".join(map(str, map(int, pred))) for pred in predictions]\n",
        "\n",
        "# Output hasil\n",
        "print(\"Prediksi 50 angka selanjutnya (HMM):\")\n",
        "for i, num in enumerate(predicted_numbers, 1):\n",
        "    print(f\"{i}. {num}\")\n",
        "\n",
        "# Cek apakah ada 0328 di dalamnya\n",
        "if \"0328\" in predicted_numbers:\n",
        "    print(\"\\n🎯 Angka 0328 ditemukan dalam prediksi!\")\n",
        "else:\n",
        "    print(\"\\n❌ Angka 0328 tidak ditemukan dalam prediksi.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R5TRqcbKX_s7",
        "outputId": "e01104d7-56ca-4091-cd22-a99586c068aa"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prediksi 50 angka selanjutnya (HMM):\n",
            "1. 8044\n",
            "2. 2755\n",
            "3. 1-248\n",
            "4. 6220\n",
            "5. 31126\n",
            "6. 1633\n",
            "7. 4225\n",
            "8. 84-10\n",
            "9. 4636\n",
            "10. 0238\n",
            "11. 5477\n",
            "12. 6135\n",
            "13. 5043\n",
            "14. 7364\n",
            "15. 87144\n",
            "16. 0425\n",
            "17. 3700\n",
            "18. 5322\n",
            "19. 8854\n",
            "20. 4332\n",
            "21. 22-35\n",
            "22. 7345\n",
            "23. 0050\n",
            "24. 44212\n",
            "25. 4064\n",
            "26. 6691\n",
            "27. 6116\n",
            "28. 0252\n",
            "29. 8515\n",
            "30. 4023\n",
            "31. 87510\n",
            "32. 7450\n",
            "33. 5867\n",
            "34. 5564\n",
            "35. 7501\n",
            "36. 7984\n",
            "37. 3043\n",
            "38. 10372\n",
            "39. 3227\n",
            "40. 3337\n",
            "41. 3703\n",
            "42. 3350\n",
            "43. 8416\n",
            "44. 7726\n",
            "45. 3465\n",
            "46. 8566\n",
            "47. 0760\n",
            "48. 01041\n",
            "49. 6323\n",
            "50. 2226\n",
            "\n",
            "❌ Angka 0328 tidak ditemukan dalam prediksi.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install numpy pandas tensorflow scikit-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QKpmqt61Ytgf",
        "outputId": "d88add27-e689-454d-ee8c-26ec08ef0339"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.24)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.70.0)\n",
            "Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.14.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.1.31)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Data angka lotre yang diberikan\n",
        "hk_lotto_data = [\n",
        "    \"8510\", \"5188\", \"1316\", \"2992\", \"3406\", \"4349\", \"0078\",\n",
        "    \"9697\", \"9206\", \"9240\", \"0851\", \"3402\", \"3321\", \"8436\",\n",
        "    \"8122\", \"6330\", \"3558\", \"8712\", \"3683\", \"8626\", \"7133\",\n",
        "    \"0930\", \"3207\", \"0802\", \"0744\", \"0836\", \"7628\", \"4804\",\n",
        "    \"0278\", \"3167\", \"4490\", \"5426\", \"8943\", \"0395\", \"6466\",\n",
        "    \"6325\", \"9933\", \"4731\", \"3038\", \"7705\", \"1008\", \"3109\",\n",
        "    \"3048\", \"9938\", \"1933\", \"3702\", \"7883\", \"7924\", \"8210\",\n",
        "    \"8253\", \"8996\", \"8688\", \"2509\", \"1409\", \"8332\", \"4875\",\n",
        "    \"4754\", \"6696\", \"9392\", \"4494\", \"8032\", \"4650\", \"4214\",\n",
        "    \"9746\", \"9937\", \"9400\", \"6958\", \"2168\", \"6702\", \"3422\",\n",
        "    \"6303\", \"7812\", \"2170\", \"8458\", \"5205\", \"7741\", \"5335\",\n",
        "    \"9415\", \"5273\", \"1481\", \"8898\", \"9066\", \"2810\", \"2089\",\n",
        "    \"3212\", \"5298\", \"7985\", \"6814\", \"7000\", \"7356\", \"9648\",\n",
        "    \"7061\", \"3725\", \"5639\", \"0495\", \"5633\", \"9620\", \"8790\",\n",
        "    \"3529\", \"3270\", \"6991\", \"3005\", \"3766\", \"5531\", \"8632\",\n",
        "    \"0138\", \"8216\", \"5845\", \"8136\", \"4651\", \"9382\", \"9541\",\n",
        "    \"7006\", \"3204\", \"4874\", \"5831\", \"8001\", \"0406\", \"1931\",\n",
        "    \"5168\", \"5096\", \"9005\", \"7032\", \"6140\", \"7883\", \"5071\",\n",
        "    \"0896\", \"8995\", \"4194\", \"3458\", \"5700\", \"1496\", \"9060\",\n",
        "    \"0897\", \"9176\", \"0891\", \"0609\", \"3434\", \"8197\", \"1782\",\n",
        "    \"3939\", \"7414\", \"0170\"\n",
        "]\n",
        "\n",
        "# Konversi data ke dalam bentuk numerik\n",
        "data_numeric = np.array([list(map(int, list(num))) for num in hk_lotto_data])\n",
        "\n",
        "# Normalisasi data agar LSTM lebih mudah belajar\n",
        "scaler = MinMaxScaler()\n",
        "data_scaled = scaler.fit_transform(data_numeric)\n",
        "\n",
        "# Membuat dataset untuk pelatihan LSTM\n",
        "X, y = [], []\n",
        "sequence_length = 5  # Gunakan 5 angka sebelumnya untuk memprediksi angka berikutnya\n",
        "\n",
        "for i in range(len(data_scaled) - sequence_length):\n",
        "    X.append(data_scaled[i:i+sequence_length])\n",
        "    y.append(data_scaled[i+sequence_length])\n",
        "\n",
        "X, y = np.array(X), np.array(y)\n",
        "\n",
        "# Membuat model LSTM\n",
        "model = Sequential([\n",
        "    LSTM(50, activation='relu', return_sequences=True, input_shape=(sequence_length, 4)),\n",
        "    LSTM(50, activation='relu'),\n",
        "    Dense(4)  # Output harus 4 angka\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "\n",
        "# Melatih model\n",
        "model.fit(X, y, epochs=100, batch_size=16, verbose=1)\n",
        "\n",
        "# Prediksi angka selanjutnya\n",
        "def predict_next_numbers(model, data, n_predictions=5):\n",
        "    predictions = []\n",
        "    last_sequence = data[-sequence_length:].reshape(1, sequence_length, 4)\n",
        "\n",
        "    for _ in range(n_predictions):\n",
        "        predicted = model.predict(last_sequence)\n",
        "        predicted = scaler.inverse_transform(predicted).flatten()\n",
        "        predicted_rounded = \"\".join(map(str, np.round(predicted).astype(int)))  # Konversi ke angka\n",
        "        predictions.append(predicted_rounded)\n",
        "\n",
        "        # Perbarui sequence dengan angka prediksi terbaru\n",
        "        new_sequence = np.vstack([last_sequence[:, 1:, :], predicted.reshape(1, 1, 4)])\n",
        "        last_sequence = new_sequence\n",
        "\n",
        "    return predictions\n",
        "\n",
        "# Prediksi 5 angka selanjutnya\n",
        "prediksi_lstm = predict_next_numbers(model, data_scaled, 5)\n",
        "\n",
        "print(\"\\n🎯 Prediksi 5 angka selanjutnya (LSTM):\", prediksi_lstm)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "QlUqTVhzYwPd",
        "outputId": "471b3ea1-8127-49dc-95cd-00c2b244729b"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - loss: 0.3404\n",
            "Epoch 2/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.2967\n",
            "Epoch 3/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.2568\n",
            "Epoch 4/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1524 \n",
            "Epoch 5/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1366\n",
            "Epoch 6/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1224 \n",
            "Epoch 7/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1189 \n",
            "Epoch 8/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1141\n",
            "Epoch 9/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1166\n",
            "Epoch 10/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.1132\n",
            "Epoch 11/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.1165\n",
            "Epoch 12/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1161\n",
            "Epoch 13/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.1171\n",
            "Epoch 14/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1123\n",
            "Epoch 15/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1163 \n",
            "Epoch 16/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1099 \n",
            "Epoch 17/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1147\n",
            "Epoch 18/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.1130\n",
            "Epoch 19/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1160\n",
            "Epoch 20/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1128 \n",
            "Epoch 21/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.1087\n",
            "Epoch 22/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1063 \n",
            "Epoch 23/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1177 \n",
            "Epoch 24/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1099 \n",
            "Epoch 25/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1060 \n",
            "Epoch 26/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.1110\n",
            "Epoch 27/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1157 \n",
            "Epoch 28/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1084 \n",
            "Epoch 29/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1089\n",
            "Epoch 30/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1109 \n",
            "Epoch 31/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1144\n",
            "Epoch 32/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1074 \n",
            "Epoch 33/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 0.1137\n",
            "Epoch 34/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.1101\n",
            "Epoch 35/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 0.1063\n",
            "Epoch 36/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 0.1067\n",
            "Epoch 37/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.1081\n",
            "Epoch 38/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.1079\n",
            "Epoch 39/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 0.1018\n",
            "Epoch 40/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.1045\n",
            "Epoch 41/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 0.1098\n",
            "Epoch 42/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.1086\n",
            "Epoch 43/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.1110\n",
            "Epoch 44/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1090 \n",
            "Epoch 45/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1106 \n",
            "Epoch 46/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1078 \n",
            "Epoch 47/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1015 \n",
            "Epoch 48/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1057 \n",
            "Epoch 49/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1057\n",
            "Epoch 50/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1012\n",
            "Epoch 51/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1131 \n",
            "Epoch 52/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1052 \n",
            "Epoch 53/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1025 \n",
            "Epoch 54/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1068\n",
            "Epoch 55/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1052\n",
            "Epoch 56/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1053 \n",
            "Epoch 57/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1067\n",
            "Epoch 58/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 0.1026\n",
            "Epoch 59/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.1010\n",
            "Epoch 60/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.1030\n",
            "Epoch 61/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1022\n",
            "Epoch 62/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1018 \n",
            "Epoch 63/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.1049\n",
            "Epoch 64/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1054\n",
            "Epoch 65/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.1007\n",
            "Epoch 66/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0929\n",
            "Epoch 67/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0960 \n",
            "Epoch 68/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0976 \n",
            "Epoch 69/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0994 \n",
            "Epoch 70/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0986 \n",
            "Epoch 71/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0958\n",
            "Epoch 72/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.1008\n",
            "Epoch 73/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.1017 \n",
            "Epoch 74/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0984 \n",
            "Epoch 75/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0924 \n",
            "Epoch 76/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0987 \n",
            "Epoch 77/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0990 \n",
            "Epoch 78/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0945\n",
            "Epoch 79/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0949 \n",
            "Epoch 80/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.0924\n",
            "Epoch 81/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0944\n",
            "Epoch 82/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0933\n",
            "Epoch 83/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0903 \n",
            "Epoch 84/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0938 \n",
            "Epoch 85/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0917 \n",
            "Epoch 86/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0897 \n",
            "Epoch 87/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0879 \n",
            "Epoch 88/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - loss: 0.0922\n",
            "Epoch 89/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 0.0927\n",
            "Epoch 90/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0913 \n",
            "Epoch 91/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0897 \n",
            "Epoch 92/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0884 \n",
            "Epoch 93/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0919 \n",
            "Epoch 94/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0860 \n",
            "Epoch 95/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0831 \n",
            "Epoch 96/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.0907\n",
            "Epoch 97/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0892 \n",
            "Epoch 98/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0905\n",
            "Epoch 99/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0849 \n",
            "Epoch 100/100\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0828 \n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 327ms/step\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 4 and the array at index 1 has size 1",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-ad9c99575b74>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;31m# Prediksi 5 angka selanjutnya\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m \u001b[0mprediksi_lstm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_next_numbers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_scaled\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n🎯 Prediksi 5 angka selanjutnya (LSTM):\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprediksi_lstm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-17-ad9c99575b74>\u001b[0m in \u001b[0;36mpredict_next_numbers\u001b[0;34m(model, data, n_predictions)\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0;31m# Perbarui sequence dengan angka prediksi terbaru\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m         \u001b[0mnew_sequence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlast_sequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m         \u001b[0mlast_sequence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sequence\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36mvstack\u001b[0;34m(tup, dtype, casting)\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m         \u001b[0marrs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 289\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcasting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 4 and the array at index 1 has size 1"
          ]
        }
      ]
    }
  ]
}